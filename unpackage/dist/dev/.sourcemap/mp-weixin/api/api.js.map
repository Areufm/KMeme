{"version":3,"file":"api.js","sources":["api/api.js"],"sourcesContent":["import pageApi from './mockData/pageApi.js'\nimport http from './http.js'\r\n\n// 小程序使用 mock 数据\nconst isMock = process.env.NODE_ENV === 'development' && process.env.UNI_PLATFORM !== 'h5'\n\n/**\n * 获取 Banner 列表。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @returns {Promise<Array>} Banner 数据。\n */\nexport const getBanner = () => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.getBanner().data)\r\n\t}\n\treturn http({\n\t\turl: '/user/getBanner',\n\t\tmethod: 'GET'\n\t})\n}\n\n/**\n * 获取首页列表数据。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @returns {Promise<Array>} 首页列表数据。\n */\nexport const getHomeList = () => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.getHomeList().data)\r\n\t}\n\treturn http({\n\t\turl: '/user/getHomeList',\n\t\tmethod: 'GET'\n\t})\n}\n\n/**\n * 获取相册图片列表。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @param {string} albumId - 相册 ID。\n * @returns {Promise<Array>} 相册图片数据。\n */\nexport const getAlbumImages = (albumId) => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.getAlbumImages().data)\r\n\t}\n\treturn http({\n\t\turl: '/album/images',\n\t\tmethod: 'POST',\n\t\tdata: { albumId }\n\t})\n}\n\n/**\n * 用户登录。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @param {string} code - 登录凭证。\n * @returns {Promise<Object>} 登录结果，包含 token。\n */\nexport const login = (code) => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.login().data)\r\n\t}\n\treturn http({\n\t\turl: '/login',\n\t\tmethod: 'POST',\n\t\tdata: { code }\n\t})\n}\n\n/**\n * 获取用户信息。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @returns {Promise<Object>} 用户信息。\n */\nexport const getUserInfo = () => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.getUserInfo().data)\r\n\t}\n\treturn http({\n\t\turl: '/getUserInfo',\n\t\tmethod: 'GET'\n\t})\n}\n\n/**\n * 获取我的收藏列表。\n * 在 H5 开发环境会自动被 mock.js 拦截，其他环境（H5 生产和小程序）会发送真实请求。\n *\n * @returns {Promise<Array>} 收藏列表数据。\n */\nexport const collectList = () => {\r\n\tif (isMock) {\r\n\t\treturn Promise.resolve(pageApi.collectList().data)\r\n\t}\n\treturn http({\n\t\turl: '/collect/list',\n\t\tmethod: 'GET'\n\t})\n}"],"names":["pageApi"],"mappings":";;;AAYO,MAAM,YAAY,MAAM;AAClB;AACX,WAAO,QAAQ,QAAQA,qBAAAA,QAAQ,YAAY,IAAI;AAAA,EAChD;AAKD;AAQO,MAAM,cAAc,MAAM;AACpB;AACX,WAAO,QAAQ,QAAQA,qBAAAA,QAAQ,cAAc,IAAI;AAAA,EAClD;AAKD;AASa,MAAA,iBAAiB,CAAC,YAAY;AAC9B;AACX,WAAO,QAAQ,QAAQA,qBAAAA,QAAQ,iBAAiB,IAAI;AAAA,EACrD;AAMD;;;;"}